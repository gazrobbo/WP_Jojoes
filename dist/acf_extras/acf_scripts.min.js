"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}var headerLayouts="",changeHeader="",showMainEditor="",sectionLayouts="",mainEditor="";function highlight_section(e){var t=document.querySelector(e.target.dataset.ignClass);null!==t&&(e.target.checked?(t.classList.add("highlight"),$("html, body").animate({scrollTop:$(e.target.dataset.ignClass).offset().top-50},200)):t.classList.remove("highlight"))}function changeIgnClasses(e){var t=e.getAttribute("data-ign-class"),a=e.closest(".acf-fields").querySelector(t);if(null==a&&(a=e.closest(t)),null==a&&(a=document.querySelector(t)),null!=a){if(e.getAttribute("data-last-value")){var r,n=e.getAttribute("data-last-value").split(" ");n=n.filter(Boolean),(r=a.classList).remove.apply(r,_toConsumableArray(n))}if(" "!==e.value&&e.value){var s,l="";if("checkbox"===e.type)l=e.checked?"checked":"unchecked",a.classList.add(l),e.setAttribute("data-last-value",l);else l=(l=e.value.split(" ")).filter(Boolean),(s=a.classList).add.apply(s,_toConsumableArray(l)),e.setAttribute("data-last-value",e.value)}}}function addDraggableGrid(){var s=document.querySelector("#poststuff"),l=0,o="",i=document.querySelectorAll(".mce-container iframe");function t(e){e.preventDefault(),e.stopPropagation(),i.forEach(function(e){e.style.pointerEvents="none"}),s.style.cursor="ew-resize",$gridType=o.closest(".acf-fields").querySelector('[data-ign-class=".grid-class"]'),$gridType.value.includes("card-grid")&&($gridType.value=$gridType.value.replace("card-grid","grid"),changeIgnClasses($gridType)),$gridType.value.includes("grid")||($gridType.value+=" grid",$gridType.value=$gridType.value.trim(),changeIgnClasses($gridType));var t=o.querySelector("[data-ign-class]"),a=t.value,r=6;a.includes("span")&&(r=/span-(\d+)/g.exec(a)[1],r=parseInt(r),a=a.replace(/span-\d+/g,"")),0!==l&&e.pageX>l+100&&(r<12&&r++,l+=100),0!==l&&e.pageX<l-100&&(1<r&&r--,l-=100);var n="span-"+r+" "+a;n=n.trim(),t.value=n,changeIgnClasses(t)}s.addEventListener("mousedown",function(e){e.target.matches(".grid-class .acf-row-handle.remove")&&(l=e.pageX,o=e.target.previousElementSibling.closest(".acf-row"),i=document.querySelectorAll(".mce-container iframe"),window.addEventListener("mousemove",t,!0))}),window.addEventListener("mouseup",function(){window.removeEventListener("mousemove",t,!0),i.forEach(function(e){e.style.pointerEvents="auto"}),s.style.cursor="auto"})}document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll("[data-ign-class]").forEach(function(e){changeIgnClasses(e)}),addDraggableGrid()}),document.addEventListener("change",function(e){e.target.matches("[data-ign-class]")&&changeIgnClasses(e.target)});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,